(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{458:function(t,e,r){"use strict";r.r(e);var a=r(25),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"docker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[t._v("#")]),t._v(" Docker")]),t._v(" "),r("h2",{attrs:{id:"build-once-run-anywhere"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#build-once-run-anywhere"}},[t._v("#")]),t._v(" Build once，Run anywhere")]),t._v(" "),r("p",[t._v("Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属于 操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于 LXC，从 0.7 版本以后开始去除 LXC，转而使用自行开发的 libcontainer，从 1.11 开始，则进一步演进为使用 runC 和 containerd。")]),t._v(" "),r("h3",{attrs:{id:"开始学习"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#开始学习"}},[t._v("#")]),t._v(" "),r("RouterLink",{attrs:{to:"/note/gitlab/"}},[t._v("开始学习")])],1)])}),[],!1,null,null,null);e.default=n.exports}}]);