(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{464:function(s,e,t){"use strict";t.r(e);var a=t(25),n=Object(a.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"使用-dockerfile-定制镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-dockerfile-定制镜像"}},[s._v("#")]),s._v(" 使用 Dockerfile 定制镜像")]),s._v(" "),t("h2",{attrs:{id:"dockerfile-定制镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-定制镜像"}},[s._v("#")]),s._v(" Dockerfile 定制镜像")]),s._v(" "),t("p",[s._v("从刚才的 "),t("code",[s._v("docker commit")]),s._v(" 的学习中，我们可以了解到，镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。")]),s._v(" "),t("p",[s._v("Dockerfile 是一个文本文件，其内包含了一条条的"),t("strong",[s._v("指令(Instruction)")]),s._v("，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。")]),s._v(" "),t("p",[s._v("还以之前定制 "),t("code",[s._v("nginx")]),s._v(" 镜像为例，这次我们使用 Dockerfile 来定制。")]),s._v(" "),t("p",[s._v("在一个空白目录中，建立一个文本文件，并命名为 "),t("code",[s._v("Dockerfile")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" mynginx\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" mynginx\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("touch")]),s._v(" Dockerfile\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("其内容为：")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" nginx\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'<h1>Hello, Docker!</h1>'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),s._v(" /usr/share/nginx/html/index.html\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("这个 Dockerfile 很简单，一共就两行。涉及到了两条指令，"),t("code",[s._v("FROM")]),s._v(" 和 "),t("code",[s._v("RUN")]),s._v("。")]),s._v(" "),t("h2",{attrs:{id:"from-指定基础镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#from-指定基础镜像"}},[s._v("#")]),s._v(" FROM 指定基础镜像")]),s._v(" "),t("p",[s._v("所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个 "),t("code",[s._v("nginx")]),s._v(" 镜像的容器，再进行修改一样，基础镜像是必须指定的。而 "),t("code",[s._v("FROM")]),s._v(" 就是指定"),t("strong",[s._v("基础镜像")]),s._v("，因此一个 "),t("code",[s._v("Dockerfile")]),s._v(" 中 "),t("code",[s._v("FROM")]),s._v(" 是必备的指令，并且必须是第一条指令。")]),s._v(" "),t("p",[s._v("在 "),t("a",{attrs:{href:"https://store.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Docker Store"),t("OutboundLink")],1),s._v(" 上有非常多的高质量的官方镜像，有可以直接拿来使用的服务类的镜像，如 "),t("a",{attrs:{href:"https://store.docker.com/images/nginx/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("nginx")]),t("OutboundLink")],1),s._v("、"),t("a",{attrs:{href:"https://store.docker.com/images/redis/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("redis")]),t("OutboundLink")],1),s._v("、"),t("a",{attrs:{href:"https://store.docker.com/images/mongo/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("mongo")]),t("OutboundLink")],1),s._v("、"),t("a",{attrs:{href:"https://store.docker.com/images/mysql/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("mysql")]),t("OutboundLink")],1),s._v("、"),t("a",{attrs:{href:"https://store.docker.com/images/httpd/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("httpd")]),t("OutboundLink")],1),s._v("、"),t("a",{attrs:{href:"https://store.docker.com/images/php/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("php")]),t("OutboundLink")],1),s._v("、"),t("a",{attrs:{href:"https://store.docker.com/images/tomcat/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("tomcat")]),t("OutboundLink")],1),s._v(" 等；也有一些方便开发、构建、运行各种语言应用的镜像，如 "),t("a",{attrs:{href:"https://store.docker.com/images/node",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("node")]),t("OutboundLink")],1),s._v("、"),t("a",{attrs:{href:"https://store.docker.com/images/openjdk/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("openjdk")]),t("OutboundLink")],1),s._v("、"),t("a",{attrs:{href:"https://store.docker.com/images/python/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("python")]),t("OutboundLink")],1),s._v("、"),t("a",{attrs:{href:"https://store.docker.com/images/ruby/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("ruby")]),t("OutboundLink")],1),s._v("、"),t("a",{attrs:{href:"https://store.docker.com/images/golang/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("golang")]),t("OutboundLink")],1),s._v(" 等。可以在其中寻找一个最符合我们最终目标的镜像为基础镜像进行定制。")]),s._v(" "),t("p",[s._v("如果没有找到对应服务的镜像，官方镜像中还提供了一些更为基础的操作系统镜像，如 "),t("a",{attrs:{href:"https://store.docker.com/images/ubuntu/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("ubuntu")]),t("OutboundLink")],1),s._v("、"),t("a",{attrs:{href:"https://store.docker.com/images/debian/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("debian")]),t("OutboundLink")],1),s._v("、"),t("a",{attrs:{href:"https://store.docker.com/images/centos/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("centos")]),t("OutboundLink")],1),s._v("、"),t("a",{attrs:{href:"https://store.docker.com/images/fedora/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("fedora")]),t("OutboundLink")],1),s._v("、"),t("a",{attrs:{href:"https://store.docker.com/images/alpine/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("alpine")]),t("OutboundLink")],1),s._v(" 等，这些操作系统的软件库为我们提供了更广阔的扩展空间。")]),s._v(" "),t("p",[s._v("除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 "),t("code",[s._v("scratch")]),s._v("。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" scratch\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("...")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("如果你以 "),t("code",[s._v("scratch")]),s._v(" 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。")]),s._v(" "),t("p",[s._v("不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，比如 "),t("a",{attrs:{href:"https://hub.docker.com/_/swarm/",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("swarm")]),t("OutboundLink")],1),s._v("、"),t("a",{attrs:{href:"https://quay.io/repository/coreos/etcd",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("coreos/etcd")]),t("OutboundLink")],1),s._v("。对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 "),t("code",[s._v("FROM scratch")]),s._v(" 会让镜像体积更加小巧。使用 "),t("a",{attrs:{href:"https://golang.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Go 语言"),t("OutboundLink")],1),s._v(" 开发的应用很多会使用这种方式来制作镜像，这也是为什么有人认为 Go 是特别适合容器微服务架构的语言的原因之一。")]),s._v(" "),t("h2",{attrs:{id:"run-执行命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#run-执行命令"}},[s._v("#")]),s._v(" RUN 执行命令")]),s._v(" "),t("p",[t("code",[s._v("RUN")]),s._v(" 指令是用来执行命令行命令的。由于命令行的强大能力，"),t("code",[s._v("RUN")]),s._v(" 指令在定制镜像时是最常用的指令之一。其格式有两种：")]),s._v(" "),t("ul",[t("li",[t("em",[s._v("shell")]),s._v(" 格式："),t("code",[s._v("RUN <命令>")]),s._v("，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 "),t("code",[s._v("RUN")]),s._v(" 指令就是这种格式。")])]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'<h1>Hello, Docker!</h1>'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),s._v(" /usr/share/nginx/html/index.html\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[t("em",[s._v("exec")]),s._v(" 格式："),t("code",[s._v('RUN ["可执行文件", "参数1", "参数2"]')]),s._v("，这更像是函数调用中的格式。")])]),s._v(" "),t("p",[s._v("既然 "),t("code",[s._v("RUN")]),s._v(" 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" debian"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("jessie\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get update\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get install "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("y gcc libc6"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("dev make\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" wget "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("O redis.tar.gz "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://download.redis.io/releases/redis-3.2.5.tar.gz"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" mkdir "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("p /usr/src/redis\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" tar "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("xzf redis.tar.gz "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("C /usr/src/redis "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("strip"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("components=1\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" make "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("C /usr/src/redis\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" make "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("C /usr/src/redis install\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("之前说过，Dockerfile 中每一个指令都会建立一层，"),t("code",[s._v("RUN")]),s._v(" 也不例外。每一个 "),t("code",[s._v("RUN")]),s._v(" 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，"),t("code",[s._v("commit")]),s._v(" 这一层的修改，构成新的镜像。")]),s._v(" "),t("p",[s._v("而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。 这是很多初学 Docker 的人常犯的一个错误。")]),s._v(" "),t("p",[t("em",[s._v("Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。")])]),s._v(" "),t("p",[s._v("上面的 "),t("code",[s._v("Dockerfile")]),s._v(" 正确的写法应该是这样：")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" debian"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("jessie\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" buildDeps="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'gcc libc6-dev make'")]),s._v(" \\\n    && apt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get update \\\n    && apt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get install "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("y $buildDeps \\\n    && wget "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("O redis.tar.gz "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://download.redis.io/releases/redis-3.2.5.tar.gz"')]),s._v(" \\\n    && mkdir "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("p /usr/src/redis \\\n    && tar "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("xzf redis.tar.gz "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("C /usr/src/redis "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("strip"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("components=1 \\\n    && make "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("C /usr/src/redis \\\n    && make "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("C /usr/src/redis install \\\n    && rm "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("rf /var/lib/apt/lists/* \\\n    && rm redis.tar.gz \\\n    && rm "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("r /usr/src/redis \\\n    && apt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get purge "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("y "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("auto"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("remove $buildDeps\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("首先，之前所有的命令只有一个目的，就是编译、安装 redis 可执行文件。因此没有必要建立很多层，这只是一层的事情。因此，这里没有使用很多个 "),t("code",[s._v("RUN")]),s._v(" 对一一对应不同的命令，而是仅仅使用一个 "),t("code",[s._v("RUN")]),s._v(" 指令，并使用 "),t("code",[s._v("&&")]),s._v(" 将各个所需命令串联起来。将之前的 7 层，简化为了 1 层。在撰写 Dockerfile 的时候，要经常提醒自己，这并不是在写 Shell 脚本，而是在定义每一层该如何构建。")]),s._v(" "),t("p",[s._v("并且，这里为了格式化还进行了换行。Dockerfile 支持 Shell 类的行尾添加 "),t("code",[s._v("\\")]),s._v(" 的命令换行方式，以及行首 "),t("code",[s._v("#")]),s._v(" 进行注释的格式。良好的格式，比如换行、缩进、注释等，会让维护、排障更为容易，这是一个比较好的习惯。")]),s._v(" "),t("p",[s._v("此外，还可以看到这一组命令的最后添加了清理工作的命令，删除了为了编译构建所需要的软件，清理了所有下载、展开的文件，并且还清理了 "),t("code",[s._v("apt")]),s._v(" 缓存文件。这是很重要的一步，我们之前说过，镜像是多层存储，每一层的东西并不会在下一层被删除，会一直跟随着镜像。因此镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。")]),s._v(" "),t("p",[s._v("很多人初学 Docker 制作出了很臃肿的镜像的原因之一，就是忘记了每一层构建的最后一定要清理掉无关文件。")]),s._v(" "),t("h2",{attrs:{id:"构建镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建镜像"}},[s._v("#")]),s._v(" 构建镜像")]),s._v(" "),t("p",[s._v("好了，让我们再回到之前定制的 nginx 镜像的 Dockerfile 来。现在我们明白了这个 Dockerfile 的内容，那么让我们来构建这个镜像吧。")]),s._v(" "),t("p",[s._v("在 "),t("code",[s._v("Dockerfile")]),s._v(" 文件所在目录执行：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ docker build -t nginx:v3 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\nSending build context to Docker daemon "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.048")]),s._v(" kB\nStep "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" FROM nginx\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" e43d811ce2f4\nStep "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" RUN "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'<h1>Hello, Docker!</h1>'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /usr/share/nginx/html/index.html\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" Running "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" 9cdc27646c7b\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 44aa4490ce2c\nRemoving intermediate container 9cdc27646c7b\nSuccessfully built 44aa4490ce2c\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("从命令的输出结果中，我们可以清晰的看到镜像的构建过程。在 "),t("code",[s._v("Step 2")]),s._v(" 中，如同我们之前所说的那样，"),t("code",[s._v("RUN")]),s._v(" 指令启动了一个容器 "),t("code",[s._v("9cdc27646c7b")]),s._v("，执行了所要求的命令，并最后提交了这一层 "),t("code",[s._v("44aa4490ce2c")]),s._v("，随后删除了所用到的这个容器 "),t("code",[s._v("9cdc27646c7b")]),s._v("。")]),s._v(" "),t("p",[s._v("这里我们使用了 "),t("code",[s._v("docker build")]),s._v(" 命令进行镜像构建。其格式为：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker build "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("选项"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("上下文路径/URL/-"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("在这里我们指定了最终镜像的名称 "),t("code",[s._v("-t nginx:v3")]),s._v("，构建成功后，我们可以像之前运行 "),t("code",[s._v("nginx:v2")]),s._v(" 那样来运行这个镜像，其结果会和 "),t("code",[s._v("nginx:v2")]),s._v(" 一样。")]),s._v(" "),t("h2",{attrs:{id:"镜像构建上下文-context"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#镜像构建上下文-context"}},[s._v("#")]),s._v(" 镜像构建上下文（Context）")]),s._v(" "),t("p",[s._v("如果注意，会看到 "),t("code",[s._v("docker build")]),s._v(" 命令最后有一个 "),t("code",[s._v(".")]),s._v("。"),t("code",[s._v(".")]),s._v(" 表示当前目录，而 "),t("code",[s._v("Dockerfile")]),s._v(" 就在当前目录，因此不少初学者以为这个路径是在指定 "),t("code",[s._v("Dockerfile")]),s._v(" 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定"),t("strong",[s._v("上下文路径")]),s._v("。那么什么是上下文呢？")]),s._v(" "),t("p",[s._v("首先我们要理解 "),t("code",[s._v("docker build")]),s._v(" 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 "),t("a",{attrs:{href:"https://docs.docker.com/engine/reference/api/docker_remote_api/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Docker Remote API"),t("OutboundLink")],1),s._v("，而如 "),t("code",[s._v("docker")]),s._v(" 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 "),t("code",[s._v("docker")]),s._v(" 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。")]),s._v(" "),t("p",[s._v("当我们进行镜像构建的时候，并非所有定制都会通过 "),t("code",[s._v("RUN")]),s._v(" 指令完成，经常会需要将一些本地文件复制进镜像，比如通过 "),t("code",[s._v("COPY")]),s._v(" 指令、"),t("code",[s._v("ADD")]),s._v(" 指令等。而 "),t("code",[s._v("docker build")]),s._v(" 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？")]),s._v(" "),t("p",[s._v("这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，"),t("code",[s._v("docker build")]),s._v(" 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。")]),s._v(" "),t("p",[s._v("如果在 "),t("code",[s._v("Dockerfile")]),s._v(" 中这么写：")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" ./package.json /app/\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这并不是要复制执行 "),t("code",[s._v("docker build")]),s._v(" 命令所在的目录下的 "),t("code",[s._v("package.json")]),s._v("，也不是复制 "),t("code",[s._v("Dockerfile")]),s._v(" 所在目录下的 "),t("code",[s._v("package.json")]),s._v("，而是复制 "),t("strong",[s._v("上下文（context）")]),s._v(" 目录下的 "),t("code",[s._v("package.json")]),s._v("。")]),s._v(" "),t("p",[s._v("因此，"),t("code",[s._v("COPY")]),s._v(" 这类指令中的源文件的路径都是"),t("em",[s._v("相对路径")]),s._v("。这也是初学者经常会问的为什么 "),t("code",[s._v("COPY ../package.json /app")]),s._v(" 或者 "),t("code",[s._v("COPY /opt/xxxx /app")]),s._v(" 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。")]),s._v(" "),t("p",[s._v("现在就可以理解刚才的命令 "),t("code",[s._v("docker build -t nginx:v3 .")]),s._v(" 中的这个 "),t("code",[s._v(".")]),s._v("，实际上是在指定上下文的目录，"),t("code",[s._v("docker build")]),s._v(" 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。")]),s._v(" "),t("p",[s._v("如果观察 "),t("code",[s._v("docker build")]),s._v(" 输出，我们其实已经看到了这个发送上下文的过程：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ docker build -t nginx:v3 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\nSending build context to Docker daemon "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.048")]),s._v(" kB\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现 "),t("code",[s._v("COPY /opt/xxxx /app")]),s._v(" 不工作后，于是干脆将 "),t("code",[s._v("Dockerfile")]),s._v(" 放到了硬盘根目录去构建，结果发现 "),t("code",[s._v("docker build")]),s._v(" 执行后，在发送一个几十 GB 的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让 "),t("code",[s._v("docker build")]),s._v(" 打包整个硬盘，这显然是使用错误。")]),s._v(" "),t("p",[s._v("一般来说，应该会将 "),t("code",[s._v("Dockerfile")]),s._v(" 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 "),t("code",[s._v(".gitignore")]),s._v(" 一样的语法写一个 "),t("code",[s._v(".dockerignore")]),s._v("，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。")]),s._v(" "),t("p",[s._v("那么为什么会有人误以为 "),t("code",[s._v(".")]),s._v(" 是指定 "),t("code",[s._v("Dockerfile")]),s._v(" 所在目录呢？这是因为在默认情况下，如果不额外指定 "),t("code",[s._v("Dockerfile")]),s._v(" 的话，会将上下文目录下的名为 "),t("code",[s._v("Dockerfile")]),s._v(" 的文件作为 Dockerfile。")]),s._v(" "),t("p",[s._v("这只是默认行为，实际上 "),t("code",[s._v("Dockerfile")]),s._v(" 的文件名并不要求必须为 "),t("code",[s._v("Dockerfile")]),s._v("，而且并不要求必须位于上下文目录中，比如可以用 "),t("code",[s._v("-f ../Dockerfile.php")]),s._v(" 参数指定某个文件作为 "),t("code",[s._v("Dockerfile")]),s._v("。")]),s._v(" "),t("p",[s._v("当然，一般大家习惯性的会使用默认的文件名 "),t("code",[s._v("Dockerfile")]),s._v("，以及会将其置于镜像构建上下文目录中。")]),s._v(" "),t("h2",{attrs:{id:"其它-docker-build-的用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其它-docker-build-的用法"}},[s._v("#")]),s._v(" 其它 "),t("code",[s._v("docker build")]),s._v(" 的用法")]),s._v(" "),t("h3",{attrs:{id:"直接用-git-repo-进行构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#直接用-git-repo-进行构建"}},[s._v("#")]),s._v(" 直接用 Git repo 进行构建")]),s._v(" "),t("p",[s._v("或许你已经注意到了，"),t("code",[s._v("docker build")]),s._v(" 还支持从 URL 构建，比如可以直接从 Git repo 中构建：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ docker build https://github.com/twang2218/gitlab-ce-zh.git"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#:8.14")]),s._v("\ndocker build https://github.com/twang2218/gitlab-ce-zh.git"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("#:8.14\nSending build context to Docker daemon "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.048")]),s._v(" kB\nStep "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" FROM gitlab/gitlab-ce:8.14.0-ce.0\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.14")]),s._v(".0-ce.0: Pulling from gitlab/gitlab-ce\naed15891ba52: Already exists\n773ae8583d14: Already exists\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("这行命令指定了构建所需的 Git repo，并且指定默认的 "),t("code",[s._v("master")]),s._v(" 分支，构建目录为 "),t("code",[s._v("/8.14/")]),s._v("，然后 Docker 就会自己去 "),t("code",[s._v("git clone")]),s._v(" 这个项目、切换到指定分支、并进入到指定目录后开始构建。")]),s._v(" "),t("h3",{attrs:{id:"用给定的-tar-压缩包构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用给定的-tar-压缩包构建"}},[s._v("#")]),s._v(" 用给定的 tar 压缩包构建")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ docker build http://server/context.tar.gz\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果所给出的 URL 不是个 Git repo，而是个 "),t("code",[s._v("tar")]),s._v(" 压缩包，那么 Docker 引擎会下载这个包，并自动解压缩，以其作为上下文，开始构建。")]),s._v(" "),t("h3",{attrs:{id:"从标准输入中读取-dockerfile-进行构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从标准输入中读取-dockerfile-进行构建"}},[s._v("#")]),s._v(" 从标准输入中读取 Dockerfile 进行构建")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker build - "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" Dockerfile\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("或")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" Dockerfile "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" docker build -\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果标准输入传入的是文本文件，则将其视为 "),t("code",[s._v("Dockerfile")]),s._v("，并开始构建。这种形式由于直接从标准输入中读取 Dockerfile 的内容，它没有上下文，因此不可以像其他方法那样可以将本地文件 "),t("code",[s._v("COPY")]),s._v(" 进镜像之类的事情。")]),s._v(" "),t("h3",{attrs:{id:"从标准输入中读取上下文压缩包进行构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从标准输入中读取上下文压缩包进行构建"}},[s._v("#")]),s._v(" 从标准输入中读取上下文压缩包进行构建")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ docker build - "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" context.tar.gz\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果发现标准输入的文件格式是 "),t("code",[s._v("gzip")]),s._v("、"),t("code",[s._v("bzip2")]),s._v(" 以及 "),t("code",[s._v("xz")]),s._v(" 的话，将会使其为上下文压缩包，直接将其展开，将里面视为上下文，并开始构建。")]),s._v(" "),t("h1",{attrs:{id:"dockerfile-指令详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-指令详解"}},[s._v("#")]),s._v(" Dockerfile 指令详解")]),s._v(" "),t("p",[s._v("我们已经介绍了 "),t("code",[s._v("FROM")]),s._v("，"),t("code",[s._v("RUN")]),s._v("，还提及了 "),t("code",[s._v("COPY")]),s._v(", "),t("code",[s._v("ADD")]),s._v("，其实 "),t("code",[s._v("Dockerfile")]),s._v(" 功能很强大，它提供了十多个指令。下面我们继续讲解其他的指令。")]),s._v(" "),t("h2",{attrs:{id:"copy-复制文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#copy-复制文件"}},[s._v("#")]),s._v(" COPY 复制文件")]),s._v(" "),t("p",[s._v("格式：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("COPY <源路径>... <目标路径>")])]),s._v(" "),t("li",[t("code",[s._v('COPY ["<源路径1>",... "<目标路径>"]')])])]),s._v(" "),t("p",[s._v("和 "),t("code",[s._v("RUN")]),s._v(" 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。")]),s._v(" "),t("p",[t("code",[s._v("COPY")]),s._v(" 指令将从构建上下文目录中 "),t("code",[s._v("<源路径>")]),s._v(" 的文件/目录复制到新的一层的镜像内的 "),t("code",[s._v("<目标路径>")]),s._v(" 位置。比如：")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" package.json /usr/src/app/\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("code",[s._v("<源路径>")]),s._v(" 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 "),t("a",{attrs:{href:"https://golang.org/pkg/path/filepath/#Match",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("filepath.Match")]),t("OutboundLink")],1),s._v(" 规则，如：")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" hom* /mydir/\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" hom"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("?")]),s._v(".txt /mydir/\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("code",[s._v("<目标路径>")]),s._v(" 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 "),t("code",[s._v("WORKDIR")]),s._v(" 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。")]),s._v(" "),t("p",[s._v("此外，还需要注意一点，使用 "),t("code",[s._v("COPY")]),s._v(" 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。")]),s._v(" "),t("h2",{attrs:{id:"add-更高级的复制文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#add-更高级的复制文件"}},[s._v("#")]),s._v(" ADD 更高级的复制文件")]),s._v(" "),t("p",[t("code",[s._v("ADD")]),s._v(" 指令和 "),t("code",[s._v("COPY")]),s._v(" 的格式和性质基本一致。但是在 "),t("code",[s._v("COPY")]),s._v(" 基础上增加了一些功能。")]),s._v(" "),t("p",[s._v("比如 "),t("code",[s._v("<源路径>")]),s._v(" 可以是一个 "),t("code",[s._v("URL")]),s._v("，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 "),t("code",[s._v("<目标路径>")]),s._v(" 去。下载后的文件权限自动设置为 "),t("code",[s._v("600")]),s._v("，如果这并不是想要的权限，那么还需要增加额外的一层 "),t("code",[s._v("RUN")]),s._v(" 进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 "),t("code",[s._v("RUN")]),s._v(" 指令进行解压缩。所以不如直接使用 "),t("code",[s._v("RUN")]),s._v(" 指令，然后使用 "),t("code",[s._v("wget")]),s._v(" 或者 "),t("code",[s._v("curl")]),s._v(" 工具下载，处理权限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推荐使用。")]),s._v(" "),t("p",[s._v("如果 "),t("code",[s._v("<源路径>")]),s._v(" 为一个 "),t("code",[s._v("tar")]),s._v(" 压缩文件的话，压缩格式为 "),t("code",[s._v("gzip")]),s._v(", "),t("code",[s._v("bzip2")]),s._v(" 以及 "),t("code",[s._v("xz")]),s._v(" 的情况下，"),t("code",[s._v("ADD")]),s._v(" 指令将会自动解压缩这个压缩文件到 "),t("code",[s._v("<目标路径>")]),s._v(" 去。")]),s._v(" "),t("p",[s._v("在某些情况下，这个自动解压缩的功能非常有用，比如官方镜像 "),t("code",[s._v("ubuntu")]),s._v(" 中：")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" scratch\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" ubuntu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("xenial"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("core"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("cloudimg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("amd64"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("root.tar.gz /\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("但在某些情况下，如果我们真的是希望复制个压缩文件进去，而不解压缩，这时就不可以使用 "),t("code",[s._v("ADD")]),s._v(" 命令了。")]),s._v(" "),t("p",[s._v("在 Docker 官方的 "),t("code",[s._v("Dockerfile 最佳实践文档")]),s._v(" 中要求，尽可能的使用 "),t("code",[s._v("COPY")]),s._v("，因为 "),t("code",[s._v("COPY")]),s._v(" 的语义很明确，就是复制文件而已，而 "),t("code",[s._v("ADD")]),s._v(" 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 "),t("code",[s._v("ADD")]),s._v(" 的场合，就是所提及的需要自动解压缩的场合。")]),s._v(" "),t("p",[s._v("另外需要注意的是，"),t("code",[s._v("ADD")]),s._v(" 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。")]),s._v(" "),t("p",[s._v("因此在 "),t("code",[s._v("COPY")]),s._v(" 和 "),t("code",[s._v("ADD")]),s._v(" 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 "),t("code",[s._v("COPY")]),s._v(" 指令，仅在需要自动解压缩的场合使用 "),t("code",[s._v("ADD")]),s._v("。")]),s._v(" "),t("h2",{attrs:{id:"cmd-容器启动命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cmd-容器启动命令"}},[s._v("#")]),s._v(" CMD 容器启动命令")]),s._v(" "),t("p",[t("code",[s._v("CMD")]),s._v(" 指令的格式和 "),t("code",[s._v("RUN")]),s._v(" 相似，也是两种格式：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("shell")]),s._v(" 格式："),t("code",[s._v("CMD <命令>")])]),s._v(" "),t("li",[t("code",[s._v("exec")]),s._v(" 格式："),t("code",[s._v('CMD ["可执行文件", "参数1", "参数2"...]')])]),s._v(" "),t("li",[s._v("参数列表格式："),t("code",[s._v('CMD ["参数1", "参数2"...]')]),s._v("。在指定了 "),t("code",[s._v("ENTRYPOINT")]),s._v(" 指令后，用 "),t("code",[s._v("CMD")]),s._v(" 指定具体的参数。")])]),s._v(" "),t("p",[s._v("之前介绍容器的时候曾经说过，Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。"),t("code",[s._v("CMD")]),s._v(" 指令就是用于指定默认的容器主进程的启动命令的。")]),s._v(" "),t("p",[s._v("在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，"),t("code",[s._v("ubuntu")]),s._v(" 镜像默认的 "),t("code",[s._v("CMD")]),s._v(" 是 "),t("code",[s._v("/bin/bash")]),s._v("，如果我们直接 "),t("code",[s._v("docker run -it ubuntu")]),s._v(" 的话，会直接进入 "),t("code",[s._v("bash")]),s._v("。我们也可以在运行时指定运行别的命令，如 "),t("code",[s._v("docker run -it ubuntu cat /etc/os-release")]),s._v("。这就是用 "),t("code",[s._v("cat /etc/os-release")]),s._v(" 命令替换了默认的 "),t("code",[s._v("/bin/bash")]),s._v(" 命令了，输出了系统版本信息。")]),s._v(" "),t("p",[s._v("在指令格式上，一般推荐使用 "),t("code",[s._v("exec")]),s._v(" 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 "),t("code",[s._v('"')]),s._v("，而不要使用单引号。")]),s._v(" "),t("p",[s._v("如果使用 "),t("code",[s._v("shell")]),s._v(" 格式的话，实际的命令会被包装为 "),t("code",[s._v("sh -c")]),s._v(" 的参数的形式进行执行。比如：")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" echo $HOME\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("在实际执行中，会将其变更为：")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sh"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-c"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"echo $HOME"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理。")]),s._v(" "),t("p",[s._v("提到 "),t("code",[s._v("CMD")]),s._v(" 就不得不提容器中应用在前台执行和后台执行的问题。这是初学者常出现的一个混淆。")]),s._v(" "),t("p",[s._v("Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 upstart/systemd 去启动后台服务，容器内没有后台服务的概念。")]),s._v(" "),t("p",[s._v("一些初学者将 "),t("code",[s._v("CMD")]),s._v(" 写为：")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" service nginx start\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("然后发现容器执行后就立即退出了。甚至在容器内去使用 "),t("code",[s._v("systemctl")]),s._v(" 命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。")]),s._v(" "),t("p",[s._v("对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。")]),s._v(" "),t("p",[s._v("而使用 "),t("code",[s._v("service nginx start")]),s._v(" 命令，则是希望 upstart 来以后台守护进程形式启动 "),t("code",[s._v("nginx")]),s._v(" 服务。而刚才说了 "),t("code",[s._v("CMD service nginx start")]),s._v(" 会被理解为 "),t("code",[s._v('CMD [ "sh", "-c", "service nginx start"]')]),s._v("，因此主进程实际上是 "),t("code",[s._v("sh")]),s._v("。那么当 "),t("code",[s._v("service nginx start")]),s._v(" 命令结束后，"),t("code",[s._v("sh")]),s._v(" 也就结束了，"),t("code",[s._v("sh")]),s._v(" 作为主进程退出了，自然就会令容器退出。")]),s._v(" "),t("p",[s._v("正确的做法是直接执行 "),t("code",[s._v("nginx")]),s._v(" 可执行文件，并且要求以前台形式运行。比如：")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"nginx"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-g"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"daemon off;"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"entrypoint-入口点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint-入口点"}},[s._v("#")]),s._v(" ENTRYPOINT 入口点")]),s._v(" "),t("p",[t("code",[s._v("ENTRYPOINT")]),s._v(" 的格式和 "),t("code",[s._v("RUN")]),s._v(" 指令格式一样，分为 "),t("code",[s._v("exec")]),s._v(" 格式和 "),t("code",[s._v("shell")]),s._v(" 格式。")]),s._v(" "),t("p",[t("code",[s._v("ENTRYPOINT")]),s._v(" 的目的和 "),t("code",[s._v("CMD")]),s._v(" 一样，都是在指定容器启动程序及参数。"),t("code",[s._v("ENTRYPOINT")]),s._v(" 在运行时也可以替代，不过比 "),t("code",[s._v("CMD")]),s._v(" 要略显繁琐，需要通过 "),t("code",[s._v("docker run")]),s._v(" 的参数 "),t("code",[s._v("--entrypoint")]),s._v(" 来指定。")]),s._v(" "),t("p",[s._v("当指定了 "),t("code",[s._v("ENTRYPOINT")]),s._v(" 后，"),t("code",[s._v("CMD")]),s._v(" 的含义就发生了改变，不再是直接的运行其命令，而是将 "),t("code",[s._v("CMD")]),s._v(" 的内容作为参数传给 "),t("code",[s._v("ENTRYPOINT")]),s._v(" 指令，换句话说实际执行时，将变为：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("ENTRYPOINT"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<CMD>"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("那么有了 "),t("code",[s._v("CMD")]),s._v(" 后，为什么还要有 "),t("code",[s._v("ENTRYPOINT")]),s._v(" 呢？这种 "),t("code",[s._v('<ENTRYPOINT> "<CMD>"')]),s._v(" 有什么好处么？让我们来看几个场景。")]),s._v(" "),t("h3",{attrs:{id:"场景一-让镜像变成像命令一样使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#场景一-让镜像变成像命令一样使用"}},[s._v("#")]),s._v(" 场景一：让镜像变成像命令一样使用")]),s._v(" "),t("p",[s._v("假设我们需要一个得知自己当前公网 IP 的镜像，那么可以先用 "),t("code",[s._v("CMD")]),s._v(" 来实现：")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ubuntu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("16.04\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get update \\\n    && apt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get install "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("y curl \\\n    && rm "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("rf /var/lib/apt/lists/*\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"curl"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-s"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://ip.cn"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("假如我们使用 "),t("code",[s._v("docker build -t myip .")]),s._v(" 来构建镜像的话，如果我们需要查询当前公网 IP，只需要执行：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ docker run myip\n当前 IP：61.148.226.66 来自：北京市 联通\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("嗯，这么看起来好像可以直接把镜像当做命令使用了，不过命令总有参数，如果我们希望加参数呢？比如从上面的 "),t("code",[s._v("CMD")]),s._v(" 中可以看到实质的命令是 "),t("code",[s._v("curl")]),s._v("，那么如果我们希望显示 HTTP 头信息，就需要加上 "),t("code",[s._v("-i")]),s._v(" 参数。那么我们可以直接加 "),t("code",[s._v("-i")]),s._v(" 参数给 "),t("code",[s._v("docker run myip")]),s._v(" 么？")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ docker run myip -i\ndocker: Error response from daemon: invalid header field value "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"oci runtime error: container_linux.go:247: starting container process caused '),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("exec: "),t("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("-i"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v(": executable file not found in "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PATH")]),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("我们可以看到可执行文件找不到的报错，"),t("code",[s._v("executable file not found")]),s._v("。之前我们说过，跟在镜像名后面的是 "),t("code",[s._v("command")]),s._v("，运行时会替换 "),t("code",[s._v("CMD")]),s._v(" 的默认值。因此这里的 "),t("code",[s._v("-i")]),s._v(" 替换了原来的 "),t("code",[s._v("CMD")]),s._v("，而不是添加在原来的 "),t("code",[s._v("curl -s http://ip.cn")]),s._v(" 后面。而 "),t("code",[s._v("-i")]),s._v(" 根本不是命令，所以自然找不到。")]),s._v(" "),t("p",[s._v("那么如果我们希望加入 "),t("code",[s._v("-i")]),s._v(" 这参数，我们就必须重新完整的输入这个命令：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ docker run myip "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -s http://ip.cn -i\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这显然不是很好的解决方案，而使用 "),t("code",[s._v("ENTRYPOINT")]),s._v(" 就可以解决这个问题。现在我们重新用 "),t("code",[s._v("ENTRYPOINT")]),s._v(" 来实现这个镜像：")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ubuntu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("16.04\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get update \\\n    && apt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get install "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("y curl \\\n    && rm "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("rf /var/lib/apt/lists/*\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"curl"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-s"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://ip.cn"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("这次我们再来尝试直接使用 "),t("code",[s._v("docker run myip -i")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ docker run myip\n当前 IP：61.148.226.66 来自：北京市 联通\n\n$ docker run myip -i\nHTTP/1.1 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" OK\nServer: nginx/1.8.0\nDate: Tue, "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" Nov "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2016")]),s._v(" 05:12:40 GMT\nContent-Type: text/html"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("charset")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("UTF-8\nVary: Accept-Encoding\nX-Powered-By: PHP/5.6.24-1~dotdeb+7.1\nX-Cache: MISS from cache-2\nX-Cache-Lookup: MISS from cache-2:80\nX-Cache: MISS from proxy-2_6\nTransfer-Encoding: chunked\nVia: "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),s._v(" cache-2:80, "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),s._v(" proxy-2_6:8006\nConnection: keep-alive\n\n当前 IP：61.148.226.66 来自：北京市 联通\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[s._v("可以看到，这次成功了。这是因为当存在 "),t("code",[s._v("ENTRYPOINT")]),s._v(" 后，"),t("code",[s._v("CMD")]),s._v(" 的内容将会作为参数传给 "),t("code",[s._v("ENTRYPOINT")]),s._v("，而这里 "),t("code",[s._v("-i")]),s._v(" 就是新的 "),t("code",[s._v("CMD")]),s._v("，因此会作为参数传给 "),t("code",[s._v("curl")]),s._v("，从而达到了我们预期的效果。")]),s._v(" "),t("h3",{attrs:{id:"场景二-应用运行前的准备工作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#场景二-应用运行前的准备工作"}},[s._v("#")]),s._v(" 场景二：应用运行前的准备工作")]),s._v(" "),t("p",[s._v("启动容器就是启动主进程，但有些时候，启动主进程前，需要一些准备工作。")]),s._v(" "),t("p",[s._v("比如 "),t("code",[s._v("mysql")]),s._v(" 类的数据库，可能需要一些数据库配置、初始化的工作，这些工作要在最终的 mysql 服务器运行之前解决。")]),s._v(" "),t("p",[s._v("此外，可能希望避免使用 "),t("code",[s._v("root")]),s._v(" 用户去启动服务，从而提高安全性，而在启动服务前还需要以 "),t("code",[s._v("root")]),s._v(" 身份执行一些必要的准备工作，最后切换到服务用户身份启动服务。或者除了服务外，其它命令依旧可以使用 "),t("code",[s._v("root")]),s._v(" 身份执行，方便调试等。")]),s._v(" "),t("p",[s._v("这些准备工作是和容器 "),t("code",[s._v("CMD")]),s._v(" 无关的，无论 "),t("code",[s._v("CMD")]),s._v(" 为什么，都需要事先进行一个预处理的工作。这种情况下，可以写一个脚本，然后放入 "),t("code",[s._v("ENTRYPOINT")]),s._v(" 中去执行，而这个脚本会将接到的参数（也就是 "),t("code",[s._v("<CMD>")]),s._v("）作为命令，在脚本最后执行。比如官方镜像 "),t("code",[s._v("redis")]),s._v(" 中就是这么做的：")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" alpine"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("3.4\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" addgroup "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("S redis && adduser "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("S "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("G redis redis\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"docker-entrypoint.sh"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPOSE")]),s._v(" 6379\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"redis-server"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 "),t("code",[s._v("ENTRYPOINT")]),s._v(" 为 "),t("code",[s._v("docker-entrypoint.sh")]),s._v(" 脚本。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/sh")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# allow the container to be started with `--user`")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'redis-server'")]),s._v(" -a "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v(" -u"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'0'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("chown")]),s._v(" -R redis "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" su-exec redis "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$0")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$@")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$@")]),s._v('"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("该脚本的内容就是根据 "),t("code",[s._v("CMD")]),s._v(" 的内容来判断，如果是 "),t("code",[s._v("redis-server")]),s._v(" 的话，则切换到 "),t("code",[s._v("redis")]),s._v(" 用户身份启动服务器，否则依旧使用 "),t("code",[s._v("root")]),s._v(" 身份执行。比如：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ docker run -it redis "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("uid")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("gid")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("groups")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h2",{attrs:{id:"env-设置环境变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#env-设置环境变量"}},[s._v("#")]),s._v(" ENV 设置环境变量")]),s._v(" "),t("p",[s._v("格式有两种：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("ENV <key> <value>")])]),s._v(" "),t("li",[t("code",[s._v("ENV <key1>=<value1> <key2>=<value2>...")])])]),s._v(" "),t("p",[s._v("这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 "),t("code",[s._v("RUN")]),s._v("，还是运行时的应用，都可以直接使用这里定义的环境变量。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('ENV VERSION=1.0 DEBUG=on \\\n    NAME="Happy Feet"\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。")]),s._v(" "),t("p",[s._v("定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 "),t("code",[s._v("node")]),s._v(" 镜像 "),t("code",[s._v("Dockerfile")]),s._v(" 中，就有类似这样的代码：")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" NODE_VERSION 7.2.0\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" curl "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("SLO "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz"')]),s._v(" \\\n  && curl "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("SLO "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"')]),s._v(" \\\n  && gpg "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("batch "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("decrypt "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("output SHASUMS256.txt SHASUMS256.txt.asc \\\n  && grep "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" node-v$NODE_VERSION-linux-x64.tar.xz\\$"')]),s._v(" SHASUMS256.txt "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("|")]),s._v(" sha256sum "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("c "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" \\\n  && tar "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("xJf "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"node-v$NODE_VERSION-linux-x64.tar.xz"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("C /usr/local "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("strip"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("components=1 \\\n  && rm "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"node-v$NODE_VERSION-linux-x64.tar.xz"')]),s._v(" SHASUMS256.txt.asc SHASUMS256.txt \\\n  && ln "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("s /usr/local/bin/node /usr/local/bin/nodejs\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("在这里先定义了环境变量 "),t("code",[s._v("NODE_VERSION")]),s._v("，其后的 "),t("code",[s._v("RUN")]),s._v(" 这层里，多次使用 "),t("code",[s._v("$NODE_VERSION")]),s._v(" 来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 "),t("code",[s._v("7.2.0")]),s._v(" 即可，"),t("code",[s._v("Dockerfile")]),s._v(" 构建维护变得更轻松了。")]),s._v(" "),t("p",[s._v("下列指令可以支持环境变量展开： "),t("code",[s._v("ADD")]),s._v("、"),t("code",[s._v("COPY")]),s._v("、"),t("code",[s._v("ENV")]),s._v("、"),t("code",[s._v("EXPOSE")]),s._v("、"),t("code",[s._v("LABEL")]),s._v("、"),t("code",[s._v("USER")]),s._v("、"),t("code",[s._v("WORKDIR")]),s._v("、"),t("code",[s._v("VOLUME")]),s._v("、"),t("code",[s._v("STOPSIGNAL")]),s._v("、"),t("code",[s._v("ONBUILD")]),s._v("。")]),s._v(" "),t("p",[s._v("可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 "),t("code",[s._v("Dockerfile")]),s._v(" 制作更多的镜像，只需使用不同的环境变量即可。")]),s._v(" "),t("h2",{attrs:{id:"arg-构建参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arg-构建参数"}},[s._v("#")]),s._v(" ARG 构建参数")]),s._v(" "),t("p",[s._v("格式："),t("code",[s._v("ARG <参数名>[=<默认值>]")])]),s._v(" "),t("p",[s._v("构建参数和 "),t("code",[s._v("ENV")]),s._v(" 的效果一样，都是设置环境变量。所不同的是，"),t("code",[s._v("ARG")]),s._v(" 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 "),t("code",[s._v("ARG")]),s._v(" 保存密码之类的信息，因为 "),t("code",[s._v("docker history")]),s._v(" 还是可以看到所有值的。")]),s._v(" "),t("p",[t("code",[s._v("Dockerfile")]),s._v(" 中的 "),t("code",[s._v("ARG")]),s._v(" 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 "),t("code",[s._v("docker build")]),s._v(" 中用 "),t("code",[s._v("--build-arg <参数名>=<值>")]),s._v(" 来覆盖。")]),s._v(" "),t("p",[s._v("在 1.13 之前的版本，要求 "),t("code",[s._v("--build-arg")]),s._v(" 中的参数名，必须在 "),t("code",[s._v("Dockerfile")]),s._v(" 中用 "),t("code",[s._v("ARG")]),s._v(" 定义过了，换句话说，就是 "),t("code",[s._v("--build-arg")]),s._v(" 指定的参数，必须在 "),t("code",[s._v("Dockerfile")]),s._v(" 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 "),t("code",[s._v("Dockerfile")]),s._v(" 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。")]),s._v(" "),t("h2",{attrs:{id:"volume-定义匿名卷"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#volume-定义匿名卷"}},[s._v("#")]),s._v(" VOLUME 定义匿名卷")]),s._v(" "),t("p",[s._v("格式为：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v('VOLUME ["<路径1>", "<路径2>"...]')])]),s._v(" "),t("li",[t("code",[s._v("VOLUME <路径>")])])]),s._v(" "),t("p",[s._v("之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 "),t("code",[s._v("Dockerfile")]),s._v(" 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VOLUME")]),s._v(" /data\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这里的 "),t("code",[s._v("/data")]),s._v(" 目录就会在运行时自动挂载为匿名卷，任何向 "),t("code",[s._v("/data")]),s._v(" 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker run -d -v mydata:/data xxxx\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("在这行命令中，就使用了 "),t("code",[s._v("mydata")]),s._v(" 这个命名卷挂载到了 "),t("code",[s._v("/data")]),s._v(" 这个位置，替代了 "),t("code",[s._v("Dockerfile")]),s._v(" 中定义的匿名卷的挂载配置。")]),s._v(" "),t("h2",{attrs:{id:"expose-暴露端口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#expose-暴露端口"}},[s._v("#")]),s._v(" EXPOSE 暴露端口")]),s._v(" "),t("p",[s._v("格式为 "),t("code",[s._v("EXPOSE <端口1> [<端口2>...]")]),s._v("。")]),s._v(" "),t("p",[t("code",[s._v("EXPOSE")]),s._v(" 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 "),t("code",[s._v("docker run -P")]),s._v(" 时，会自动随机映射 "),t("code",[s._v("EXPOSE")]),s._v(" 的端口。")]),s._v(" "),t("p",[s._v("此外，在早期 Docker 版本中还有一个特殊的用处。以前所有容器都运行于默认桥接网络中，因此所有容器互相之间都可以直接访问，这样存在一定的安全性问题。于是有了一个 Docker 引擎参数 "),t("code",[s._v("--icc=false")]),s._v("，当指定该参数后，容器间将默认无法互访，除非互相间使用了 "),t("code",[s._v("--links")]),s._v(" 参数的容器才可以互通，并且只有镜像中 "),t("code",[s._v("EXPOSE")]),s._v(" 所声明的端口才可以被访问。这个 "),t("code",[s._v("--icc=false")]),s._v(" 的用法，在引入了 "),t("code",[s._v("docker network")]),s._v(" 后已经基本不用了，通过自定义网络可以很轻松的实现容器间的互联与隔离。")]),s._v(" "),t("p",[s._v("要将 "),t("code",[s._v("EXPOSE")]),s._v(" 和在运行时使用 "),t("code",[s._v("-p <宿主端口>:<容器端口>")]),s._v(" 区分开来。"),t("code",[s._v("-p")]),s._v("，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 "),t("code",[s._v("EXPOSE")]),s._v(" 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。")]),s._v(" "),t("h2",{attrs:{id:"workdir-指定工作目录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#workdir-指定工作目录"}},[s._v("#")]),s._v(" WORKDIR 指定工作目录")]),s._v(" "),t("p",[s._v("格式为 "),t("code",[s._v("WORKDIR <工作目录路径>")]),s._v("。")]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("WORKDIR")]),s._v(" 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，"),t("code",[s._v("WORKDIR")]),s._v(" 会帮你建立目录。")]),s._v(" "),t("p",[s._v("之前提到一些初学者常犯的错误是把 "),t("code",[s._v("Dockerfile")]),s._v(" 等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误：")]),s._v(" "),t("div",{staticClass:"language-docker line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-docker"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" cd /app\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),s._v(" world.txt\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("如果将这个 "),t("code",[s._v("Dockerfile")]),s._v(" 进行构建镜像运行后，会发现找不到 "),t("code",[s._v("/app/world.txt")]),s._v(" 文件，或者其内容不是 "),t("code",[s._v("hello")]),s._v("。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 "),t("code",[s._v("Dockerfile")]),s._v(" 中，这两行 "),t("code",[s._v("RUN")]),s._v(" 命令的执行环境根本不同，是两个完全不同的容器。这就是对 "),t("code",[s._v("Dockerfile")]),s._v(" 构建分层存储的概念不了解所导致的错误。")]),s._v(" "),t("p",[s._v("之前说过每一个 "),t("code",[s._v("RUN")]),s._v(" 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 "),t("code",[s._v("RUN cd /app")]),s._v(" 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。")]),s._v(" "),t("p",[s._v("因此如果需要改变以后各层的工作目录的位置，那么应该使用 "),t("code",[s._v("WORKDIR")]),s._v(" 指令。")]),s._v(" "),t("h2",{attrs:{id:"user-指定当前用户"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#user-指定当前用户"}},[s._v("#")]),s._v(" USER 指定当前用户")]),s._v(" "),t("p",[s._v("格式："),t("code",[s._v("USER <用户名>")])]),s._v(" "),t("p",[t("code",[s._v("USER")]),s._v(" 指令和 "),t("code",[s._v("WORKDIR")]),s._v(" 相似，都是改变环境状态并影响以后的层。"),t("code",[s._v("WORKDIR")]),s._v(" 是改变工作目录，"),t("code",[s._v("USER")]),s._v(" 则是改变之后层的执行 "),t("code",[s._v("RUN")]),s._v(", "),t("code",[s._v("CMD")]),s._v(" 以及 "),t("code",[s._v("ENTRYPOINT")]),s._v(" 这类命令的身份。")]),s._v(" "),t("p",[s._v("当然，和 "),t("code",[s._v("WORKDIR")]),s._v(" 一样，"),t("code",[s._v("USER")]),s._v(" 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('RUN groupadd -r redis && useradd -r -g redis redis\nUSER redis\nRUN [ "redis-server" ]\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("如果以 "),t("code",[s._v("root")]),s._v(" 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用 "),t("code",[s._v("su")]),s._v(" 或者 "),t("code",[s._v("sudo")]),s._v("，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错。建议使用 "),t("a",{attrs:{href:"https://github.com/tianon/gosu",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("gosu")]),t("OutboundLink")],1),s._v("。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('# 建立 redis 用户，并使用 gosu 换另一个用户执行命令\nRUN groupadd -r redis && useradd -r -g redis redis\n# 下载 gosu\nRUN wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64" \\\n    && chmod +x /usr/local/bin/gosu \\\n    && gosu nobody true\n# 设置 CMD，并以另外的用户执行\nCMD [ "exec", "gosu", "redis", "redis-server" ]\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h2",{attrs:{id:"healthcheck-健康检查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#healthcheck-健康检查"}},[s._v("#")]),s._v(" HEALTHCHECK 健康检查")]),s._v(" "),t("p",[s._v("格式：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("HEALTHCHECK [选项] CMD <命令>")]),s._v("：设置检查容器健康状况的命令")]),s._v(" "),t("li",[t("code",[s._v("HEALTHCHECK NONE")]),s._v("：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令")])]),s._v(" "),t("p",[t("code",[s._v("HEALTHCHECK")]),s._v(" 指令是告诉 Docker 应该如何进行判断容器的状态是否正常，这是 Docker 1.12 引入的新指令。")]),s._v(" "),t("p",[s._v("在没有 "),t("code",[s._v("HEALTHCHECK")]),s._v(" 指令前，Docker 引擎只可以通过容器内主进程是否退出来判断容器是否状态异常。很多情况下这没问题，但是如果程序进入死锁状态，或者死循环状态，应用进程并不退出，但是该容器已经无法提供服务了。在 1.12 以前，Docker 不会检测到容器的这种状态，从而不会重新调度，导致可能会有部分容器已经无法提供服务了却还在接受用户请求。")]),s._v(" "),t("p",[s._v("而自 1.12 之后，Docker 提供了 "),t("code",[s._v("HEALTHCHECK")]),s._v(" 指令，通过该指令指定一行命令，用这行命令来判断容器主进程的服务状态是否还正常，从而比较真实的反应容器实际状态。")]),s._v(" "),t("p",[s._v("当在一个镜像指定了 "),t("code",[s._v("HEALTHCHECK")]),s._v(" 指令后，用其启动容器，初始状态会为 "),t("code",[s._v("starting")]),s._v("，在 "),t("code",[s._v("HEALTHCHECK")]),s._v(" 指令检查成功后变为 "),t("code",[s._v("healthy")]),s._v("，如果连续一定次数失败，则会变为 "),t("code",[s._v("unhealthy")]),s._v("。")]),s._v(" "),t("p",[t("code",[s._v("HEALTHCHECK")]),s._v(" 支持下列选项：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("--interval=<间隔>")]),s._v("：两次健康检查的间隔，默认为 30 秒；")]),s._v(" "),t("li",[t("code",[s._v("--timeout=<时长>")]),s._v("：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；")]),s._v(" "),t("li",[t("code",[s._v("--retries=<次数>")]),s._v("：当连续失败指定次数后，则将容器状态视为 "),t("code",[s._v("unhealthy")]),s._v("，默认 3 次。")])]),s._v(" "),t("p",[s._v("和 "),t("code",[s._v("CMD")]),s._v(", "),t("code",[s._v("ENTRYPOINT")]),s._v(" 一样，"),t("code",[s._v("HEALTHCHECK")]),s._v(" 只可以出现一次，如果写了多个，只有最后一个生效。")]),s._v(" "),t("p",[s._v("在 "),t("code",[s._v("HEALTHCHECK [选项] CMD")]),s._v(" 后面的命令，格式和 "),t("code",[s._v("ENTRYPOINT")]),s._v(" 一样，分为 "),t("code",[s._v("shell")]),s._v(" 格式，和 "),t("code",[s._v("exec")]),s._v(" 格式。命令的返回值决定了该次健康检查的成功与否："),t("code",[s._v("0")]),s._v("：成功；"),t("code",[s._v("1")]),s._v("：失败；"),t("code",[s._v("2")]),s._v("：保留，不要使用这个值。")]),s._v(" "),t("p",[s._v("假设我们有个镜像是个最简单的 Web 服务，我们希望增加健康检查来判断其 Web 服务是否在正常工作，我们可以用 "),t("code",[s._v("curl")]),s._v(" 来帮助判断，其 "),t("code",[s._v("Dockerfile")]),s._v(" 的 "),t("code",[s._v("HEALTHCHECK")]),s._v(" 可以这么写：")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" nginx\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get update && apt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get install "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("y curl && rm "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("rf /var/lib/apt/lists/*\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("HEALTHCHECK")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("interval=5s "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("timeout=3s \\\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" curl "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("fs http"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("//localhost/ "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("|")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("|")]),s._v(" exit 1\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("这里我们设置了每 5 秒检查一次（这里为了试验所以间隔非常短，实际应该相对较长），如果健康检查命令超过 3 秒没响应就视为失败，并且使用 "),t("code",[s._v("curl -fs http://localhost/ || exit 1")]),s._v(" 作为健康检查命令。")]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("docker build")]),s._v(" 来构建这个镜像：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ docker build -t myweb:v1 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("构建好了后，我们启动一个容器：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ docker run -d --name web -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":80 myweb:v1\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("当运行该镜像后，可以通过 "),t("code",[s._v("docker container ls")]),s._v(" 看到最初的状态为 "),t("code",[s._v("(health: starting)")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ docker container "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                            PORTS               NAMES\n03e28eb00bd0        myweb:v1            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"nginx -g \'daemon off"')]),s._v("   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" seconds ago       Up "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" seconds "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("health: starting"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("/tcp, "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("443")]),s._v("/tcp     web\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("在等待几秒钟后，再次 "),t("code",[s._v("docker container ls")]),s._v("，就会看到健康状态变化为了 "),t("code",[s._v("(healthy)")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ docker container "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS               NAMES\n03e28eb00bd0        myweb:v1            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"nginx -g \'daemon off"')]),s._v("   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v(" seconds ago      Up "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" seconds "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("healthy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("/tcp, "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("443")]),s._v("/tcp     web\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("如果健康检查连续失败超过了重试次数，状态就会变为 "),t("code",[s._v("(unhealthy)")]),s._v("。")]),s._v(" "),t("p",[s._v("为了帮助排障，健康检查命令的输出（包括 "),t("code",[s._v("stdout")]),s._v(" 以及 "),t("code",[s._v("stderr")]),s._v("）都会被存储于健康状态里，可以用 "),t("code",[s._v("docker inspect")]),s._v(" 来查看。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ docker inspect --format "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{{json .State.Health}}'")]),s._v(" web "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" python -m json.tool\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"FailingStreak"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Log"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"End"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2016-11-25T14:35:37.940957051Z"')]),s._v(",\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ExitCode"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(",\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Output"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<!DOCTYPE html>'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("<html>"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("<head>"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("<title>Welcome to nginx!</title>"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("<style>"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("    body {"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("        width: 35em;"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("        margin: 0 auto;"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("        font-family: Tahoma, Verdana, Arial, sans-serif;"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("    }"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("</style>"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("</head>"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("<body>"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("<h1>Welcome to nginx!</h1>"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("<p>If you see this page, the nginx web server is successfully installed and"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("working. Further configuration is required.</p>"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("<p>For online documentation and support please refer to"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("<a href="),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("http://nginx.org/"),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v(">nginx.org</a>.<br/>"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("Commercial support is available at"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("<a href="),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("http://nginx.com/"),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v(">nginx.com</a>.</p>"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("<p><em>Thank you for using nginx.</em></p>"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("</body>"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("</html>"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),s._v(",\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Start"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2016-11-25T14:35:37.780192565Z"')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Status"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"healthy"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("h2",{attrs:{id:"onbuild-为他人作嫁衣"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#onbuild-为他人作嫁衣"}},[s._v("#")]),s._v(" ONBUILD 为他人作嫁衣")]),s._v(" "),t("p",[s._v("格式："),t("code",[s._v("ONBUILD <其它指令>")]),s._v("。")]),s._v(" "),t("p",[t("code",[s._v("ONBUILD")]),s._v(" 是一个特殊的指令，它后面跟的是其它指令，比如 "),t("code",[s._v("RUN")]),s._v(", "),t("code",[s._v("COPY")]),s._v(" 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。")]),s._v(" "),t("p",[t("code",[s._v("Dockerfile")]),s._v(" 中的其它指令都是为了定制当前镜像而准备的，唯有 "),t("code",[s._v("ONBUILD")]),s._v(" 是为了帮助别人定制自己而准备的。")]),s._v(" "),t("p",[s._v("假设我们要制作 Node.js 所写的应用的镜像。我们都知道 Node.js 使用 "),t("code",[s._v("npm")]),s._v(" 进行包管理，所有依赖、配置、启动信息等会放到 "),t("code",[s._v("package.json")]),s._v(" 文件里。在拿到程序代码后，需要先进行 "),t("code",[s._v("npm install")]),s._v(" 才可以获得所有需要的依赖。然后就可以通过 "),t("code",[s._v("npm start")]),s._v(" 来启动应用。因此，一般来说会这样写 "),t("code",[s._v("Dockerfile")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("slim\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" mkdir /app\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /app\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" ./package.json /app\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"npm"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"install"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" . /app/\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"npm"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"start"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("把这个 "),t("code",[s._v("Dockerfile")]),s._v(" 放到 Node.js 项目的根目录，构建好镜像后，就可以直接拿来启动容器运行。但是如果我们还有第二个 Node.js 项目也差不多呢？好吧，那就再把这个 "),t("code",[s._v("Dockerfile")]),s._v(" 复制到第二个项目里。那如果有第三个项目呢？再复制么？文件的副本越多，版本控制就越困难，让我们继续看这样的场景维护的问题。")]),s._v(" "),t("p",[s._v("如果第一个 Node.js 项目在开发过程中，发现这个 "),t("code",[s._v("Dockerfile")]),s._v(" 里存在问题，比如敲错字了、或者需要安装额外的包，然后开发人员修复了这个 "),t("code",[s._v("Dockerfile")]),s._v("，再次构建，问题解决。\b第一个项目没问题了，但是第二个项目呢？虽然最初 "),t("code",[s._v("Dockerfile")]),s._v(" 是复制、粘贴自第一个项目的，但是并不会因为第一个项目修复了他们的 "),t("code",[s._v("Dockerfile")]),s._v("，而第二个项目的 "),t("code",[s._v("Dockerfile")]),s._v(" 就会被自动修复。")]),s._v(" "),t("p",[s._v("那么我们可不可以做一个基础镜像，然后各个项目使用这个基础镜像呢？这样基础镜像更新，各个项目不用同步 "),t("code",[s._v("Dockerfile")]),s._v(" 的变化，重新构建后就继承了基础镜像的更新？好吧，可以，让我们看看这样的结果。那么上面的这个 "),t("code",[s._v("Dockerfile")]),s._v(" 就会变为：")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("slim\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" mkdir /app\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /app\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"npm"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"start"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("这里我们把项目相关的构建指令拿出来，放到子项目里去。假设这个基础镜像的名字为 "),t("code",[s._v("my-node")]),s._v(" 的话，各个项目内的自己的 "),t("code",[s._v("Dockerfile")]),s._v(" 就变为：")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" my"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("node\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" ./package.json /app\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"npm"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"install"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" . /app/\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("基础镜像变化后，各个项目都用这个 "),t("code",[s._v("Dockerfile")]),s._v(" 重新构建镜像，会继承基础镜像的更新。")]),s._v(" "),t("p",[s._v("那么，问题解决了么？没有。准确说，只解决了一半。如果这个 "),t("code",[s._v("Dockerfile")]),s._v(" 里面有些东西需要调整呢？比如 "),t("code",[s._v("npm install")]),s._v(" 都需要加一些参数，那怎么办？这一行 "),t("code",[s._v("RUN")]),s._v(" 是不可能放入基础镜像的，因为涉及到了当前项目的 "),t("code",[s._v("./package.json")]),s._v("，难道又要一个个修改么？所以说，这样制作基础镜像，只解决了原来的 "),t("code",[s._v("Dockerfile")]),s._v(" 的前4条指令的变化问题，而后面三条指令的变化则完全没办法处理。")]),s._v(" "),t("p",[t("code",[s._v("ONBUILD")]),s._v(" 可以解决这个问题。让我们用 "),t("code",[s._v("ONBUILD")]),s._v(" 重新写一下基础镜像的 "),t("code",[s._v("Dockerfile")]),s._v(":")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("slim\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" mkdir /app\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /app\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ONBUILD")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" ./package.json /app\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ONBUILD")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"npm"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"install"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ONBUILD")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" . /app/\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"npm"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"start"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("这次我们回到原始的 "),t("code",[s._v("Dockerfile")]),s._v("，但是这次将项目相关的指令加上 "),t("code",[s._v("ONBUILD")]),s._v("，这样在构建基础镜像的时候，这三行并不会被执行。然后各个项目的 "),t("code",[s._v("Dockerfile")]),s._v(" 就变成了简单地：")]),s._v(" "),t("div",{staticClass:"language-dockerfile line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" my"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("node\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("是的，只有这么一行。当在各个项目目录中，用这个只有一行的 "),t("code",[s._v("Dockerfile")]),s._v(" 构建镜像时，之前基础镜像的那三行 "),t("code",[s._v("ONBUILD")]),s._v(" 就会开始执行，成功的将当前项目的代码复制进镜像、并且针对本项目执行 "),t("code",[s._v("npm install")]),s._v("，生成应用镜像。")]),s._v(" "),t("h2",{attrs:{id:"参考文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[s._v("#")]),s._v(" 参考文档")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Dockerfie 官方文档"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Dockerfile 最佳实践文档"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/docker-library/docs",target:"_blank",rel:"noopener noreferrer"}},[s._v("Docker 官方镜像 Dockerfile"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=n.exports}}]);