(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{483:function(a,s,t){"use strict";t.r(s);var e=t(25),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"定位进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定位进程"}},[a._v("#")]),a._v(" 定位进程")]),a._v(" "),t("p",[a._v("登录服务器，执行top命令，查看CPU占用情况（-c 可以完整显示命令）：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$top\n   PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n  1893 admin     20   0 7127m 2.6g  38m S 181.7 32.6  10:20.26 java\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),t("p",[a._v("通过以上命令，我们可以看到，进程ID为1893的Java进程的CPU占用率达到了181%，基本可以定位到是我们的Java应用导致整个服务器的CPU占用率飙升。")])]),a._v(" "),t("h2",{attrs:{id:"定位线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定位线程"}},[a._v("#")]),a._v(" 定位线程")]),a._v(" "),t("p",[a._v("我们知道，Java是单进程多线程的，那么，我们接下来看看PID=1893的这个Java进程中的各个线程的CPU使用情况，同样是用top命令：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$top -Hp 1893\n   PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n  4519 admin     20   0 7127m 2.6g  38m R 18.6 32.6   0:40.11 java\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("通过top -Hp 1893命令，我们可以发现，当前1893这个进程中，ID为4519的线程占用CPU最高。")]),a._v(" "),t("h2",{attrs:{id:"定位代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定位代码"}},[a._v("#")]),a._v(" 定位代码")]),a._v(" "),t("p",[a._v("通过top命令，我们目前已经定位到导致CPU使用率较高的具体线程， 那么我么接下来就定位下到底是哪一行代码存在问题。")]),a._v(" "),t("p",[a._v("首先，我们需要把4519这个线程转成16进制：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$printf %x 4519\n11a7\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("接下来，通过jstack命令，查看栈信息：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('$sudo -u admin  jstack 1893 |grep -A 200 11a7\n"HSFBizProcessor-DEFAULT-8-thread-5" #500 daemon prio=10 os_prio=0 tid=0x00007f632314a800 nid=0x11a2 runnable [0x000000005442a000]\n   java.lang.Thread.State: RUNNABLE\n  at sun.misc.URLClassPath$Loader.findResource(URLClassPath.java:684)\n  at sun.misc.URLClassPath.findResource(URLClassPath.java:188)\n  at java.net.URLClassLoader$2.run(URLClassLoader.java:569)\n  at java.net.URLClassLoader$2.run(URLClassLoader.java:567)\n  at java.security.AccessController.doPrivileged(Native Method)\n  at java.net.URLClassLoader.findResource(URLClassLoader.java:566)\n  at java.lang.ClassLoader.getResource(ClassLoader.java:1093)\n  at java.net.URLClassLoader.getResourceAsStream(URLClassLoader.java:232)\n  at org.hibernate.validator.internal.xml.ValidationXmlParser.getInputStreamForPath(ValidationXmlParser.java:248)\n  at org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationConfig(ValidationXmlParser.java:191)\n  at org.hibernate.validator.internal.xml.ValidationXmlParser.parseValidationXml(ValidationXmlParser.java:65)\n  at org.hibernate.validator.internal.engine.ConfigurationImpl.parseValidationXml(ConfigurationImpl.java:287)\n  at org.hibernate.validator.internal.engine.ConfigurationImpl.buildValidatorFactory(ConfigurationImpl.java:174)\n  at javax.validation.Validation.buildDefaultValidatorFactory(Validation.java:111)\n  at com.test.common.util.BeanValidator.validate(BeanValidator.java:30)\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br")])]),t("p",[a._v("通过以上代码，我们可以清楚的看到，BeanValidator.java的第30行是有可能存在问题的。\n3")]),a._v(" "),t("h2",{attrs:{id:"问题解决"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题解决"}},[a._v("#")]),a._v(" 问题解决")]),a._v(" "),t("p",[a._v("接下来就是通过查看代码来解决问题了，我们发现，我们自定义了一个BeanValidator，封装了Hibernate的Validator，然后在validate方法中，通过Validation.buildDefaultValidatorFactory().getValidator()初始化一个Validator实例，通过分析发现这个实例化的过程比较耗时。")]),a._v(" "),t("p",[a._v("我们重构了一下代码，把Validator实例的初始化提到方法外，在类初始化的时候创建一次就解决了问题。")]),a._v(" "),t("p",[a._v("4")]),a._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),t("p",[a._v("以上，展示了一次比较完成的线上问题定位过程。主要用到的命令有:top 、printf 和 jstack")]),a._v(" "),t("p",[a._v("另外，线上问题排查还可以使用Alibaba开源的工具Arthas进行排查，以上问题，可以使用一下命令定位：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("thread -n 3 //查看cpu占比前三的线程\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("5.查找java的堆栈信息")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("jstack <pid> | grep -a 线程id（十六进制）\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("ol",[t("li",[a._v("利用top命令查看哪个进程占用了CPU(top -c P)")]),a._v(" "),t("li",[a._v("找出进程中最耗CPU的线程(top -Hp 10675)")]),a._v(" "),t("li",[a._v('将进程ID转化为16进制(printf "%x\\n" 10765)')]),a._v(" "),t("li",[a._v("然后使用jstack工具看看线程在干什么(jstack 10675 | grep '0x2a34')，同时可以配合使用jmap -histo:live pid 查看该进程中存活对象(如果发生OOM的话)")])]),a._v(" "),t("p",[a._v("获取堆转储文件\n1、如果想主动获取，可以使用jamp命令，对于部署到服务器上的程序可以采用这种方式，获取堆转储文件后scp到本地，然后本地分析。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("jmap -dump:format=b,file=<dumpfile.hprof> <pid>\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("2、如果想在发生内存溢出的时候自动dump，需要添加下面参数")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("-XX:+HeapDumpOnOutOfMemoryError\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])])])}),[],!1,null,null,null);s.default=n.exports}}]);