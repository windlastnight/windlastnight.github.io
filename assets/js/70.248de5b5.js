(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{470:function(a,t,r){"use strict";r.r(t);var s=r(25),e=Object(s.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"java-1-8-常用gc参数速查表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java-1-8-常用gc参数速查表"}},[a._v("#")]),a._v(" Java 1.8 常用GC参数速查表")]),a._v(" "),r("h1",{attrs:{id:"gc信息打印"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gc信息打印"}},[a._v("#")]),a._v(" GC信息打印")]),a._v(" "),r("h3",{attrs:{id:"verbose-gc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#verbose-gc"}},[a._v("#")]),a._v(" -verbose:gc")]),a._v(" "),r("p",[a._v("开启输出JVM GC日志")]),a._v(" "),r("h3",{attrs:{id:"verbose-class"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#verbose-class"}},[a._v("#")]),a._v(" -verbose:class")]),a._v(" "),r("p",[a._v("查看类加载信息明细")]),a._v(" "),r("h3",{attrs:{id:"xx-printgcdetails"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-printgcdetails"}},[a._v("#")]),a._v(" -XX:+PrintGCDetails")]),a._v(" "),r("p",[a._v("GC日志打印详细信息")]),a._v(" "),r("h3",{attrs:{id:"xx-printgcdatestamps"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-printgcdatestamps"}},[a._v("#")]),a._v(" -XX:+PrintGCDateStamps")]),a._v(" "),r("p",[a._v("GC日志打印时间戳信息")]),a._v(" "),r("h3",{attrs:{id:"xx-printheapatgc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-printheapatgc"}},[a._v("#")]),a._v(" -XX:+PrintHeapAtGC")]),a._v(" "),r("p",[a._v("在GC前后打印GC日志")]),a._v(" "),r("h3",{attrs:{id:"xx-printgcapplicationstoppedtime"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-printgcapplicationstoppedtime"}},[a._v("#")]),a._v(" -XX:+PrintGCApplicationStoppedTime")]),a._v(" "),r("p",[a._v("打印应用暂停时间")]),a._v(" "),r("h3",{attrs:{id:"xx-printgcapplicationconcurrenttime"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-printgcapplicationconcurrenttime"}},[a._v("#")]),a._v(" -XX:+PrintGCApplicationConcurrentTime")]),a._v(" "),r("p",[a._v("打印每次垃圾回收前，程序未中断的执行时间")]),a._v(" "),r("h3",{attrs:{id:"xloggc-gc-log"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xloggc-gc-log"}},[a._v("#")]),a._v(" -Xloggc:./gc.log")]),a._v(" "),r("p",[a._v("指定GC日志目录何文件名")]),a._v(" "),r("h3",{attrs:{id:"xx-heapdumponoutofmemoryerror"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-heapdumponoutofmemoryerror"}},[a._v("#")]),a._v(" -XX:+HeapDumpOnOutOfMemoryError")]),a._v(" "),r("p",[a._v("当发生 OOM(OutOfMemory)时，自动转储堆内存快照，缺省情况未指定目录时，JVM 会创建一个名称为 java_pidPID.hprof 的堆 dump 文件在 JVM 的工作目录下")]),a._v(" "),r("h3",{attrs:{id:"xx-heapdumppath-data-log-gc-dump"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-heapdumppath-data-log-gc-dump"}},[a._v("#")]),a._v(" -XX:HeapDumpPath=/data/log/gc/dump/")]),a._v(" "),r("p",[a._v("指定OOM时堆内存转储快照位置")]),a._v(" "),r("h3",{attrs:{id:"xx-printclasshistogrambeforefullgc、-xx-printclasshistogramafterfullgc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-printclasshistogrambeforefullgc、-xx-printclasshistogramafterfullgc"}},[a._v("#")]),a._v(" -XX:+PrintClassHistogramBeforeFullGC、-XX:+PrintClassHistogramAfterFullGC")]),a._v(" "),r("p",[a._v("Full GC前后打印跟踪类视图")]),a._v(" "),r("h3",{attrs:{id:"xx-printtenuringdistribution"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-printtenuringdistribution"}},[a._v("#")]),a._v(" -XX:+PrintTenuringDistribution")]),a._v(" "),r("p",[a._v("打印Young GC各个年龄段的对象分布")]),a._v(" "),r("h3",{attrs:{id:"xx-printtlab"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-printtlab"}},[a._v("#")]),a._v(" -XX:+PrintTLAB")]),a._v(" "),r("p",[a._v("打印TLAB(线程本地分配缓存区)空间使用情况")]),a._v(" "),r("h1",{attrs:{id:"cms-g1通用内存区域设置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cms-g1通用内存区域设置"}},[a._v("#")]),a._v(" CMS/G1通用内存区域设置")]),a._v(" "),r("h3",{attrs:{id:"xmx1024m"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xmx1024m"}},[a._v("#")]),a._v(" -Xmx1024M")]),a._v(" "),r("p",[a._v("JVM最大堆内存大小")]),a._v(" "),r("h3",{attrs:{id:"xms1024m"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xms1024m"}},[a._v("#")]),a._v(" -Xms1024M")]),a._v(" "),r("p",[a._v("JVM初始内存大小，建议与-Xmx一致")]),a._v(" "),r("h3",{attrs:{id:"xmn1536m"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xmn1536m"}},[a._v("#")]),a._v(" -Xmn1536M")]),a._v(" "),r("p",[a._v("年轻代空间大小，使用G1收集器是不建议设置该值")]),a._v(" "),r("h3",{attrs:{id:"xss1m"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xss1m"}},[a._v("#")]),a._v(" -Xss1M")]),a._v(" "),r("p",[a._v("每个线程的堆栈大小")]),a._v(" "),r("h3",{attrs:{id:"xx-maxmetaspacesize-512m"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-maxmetaspacesize-512m"}},[a._v("#")]),a._v(" -XX:MaxMetaspaceSize=512M")]),a._v(" "),r("p",[a._v("最大元空间大小")]),a._v(" "),r("h3",{attrs:{id:"xx-metaspacesize-512m"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-metaspacesize-512m"}},[a._v("#")]),a._v(" -XX:MetaspaceSize=512M")]),a._v(" "),r("p",[a._v("初始元空间大小")]),a._v(" "),r("h3",{attrs:{id:"xx-survivorratio-8"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-survivorratio-8"}},[a._v("#")]),a._v(" -XX:SurvivorRatio=8")]),a._v(" "),r("p",[a._v("年轻代中Eden区与Survivor区的大小比值，缺省默认值为8")]),a._v(" "),r("h3",{attrs:{id:"xx-maxdirectmemorysize-40m"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-maxdirectmemorysize-40m"}},[a._v("#")]),a._v(" -XX:MaxDirectMemorySize=40M")]),a._v(" "),r("p",[a._v("最大堆外内存大小")]),a._v(" "),r("h1",{attrs:{id:"cms-g1通用阈值设置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cms-g1通用阈值设置"}},[a._v("#")]),a._v(" CMS/G1通用阈值设置")]),a._v(" "),r("h3",{attrs:{id:"xx-maxtenuringthreshold-15"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-maxtenuringthreshold-15"}},[a._v("#")]),a._v(" -XX:MaxTenuringThreshold=15")]),a._v(" "),r("p",[a._v("设置新生代需要经历多少次GC晋升到老年代中的最大阈值，缺省默认值为15;\n动态年龄判定规则： 动态年龄判定规则时，不是看相同年龄，而是年龄从小到大累加，当加入某个年龄段后，累加和超过survivor区域*TargetSurvivorRatio的时候，就从这个年龄段（包括）往上的年龄的对象进行晋升。\n其中：TargetSurvivorRatio也是个JVM参数，可配置，默认50%")]),a._v(" "),r("h3",{attrs:{id:"xx-pretenuresizethreshold-1m"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-pretenuresizethreshold-1m"}},[a._v("#")]),a._v(" -XX:PretenureSizeThreshold=1M")]),a._v(" "),r("p",[a._v("代表分配在新生代一个对象占用内存最大值，超过该最大值对象直接在old区分配，默认值缺省是0，代表对象不管多大都是先在Eden中分配内存")]),a._v(" "),r("h1",{attrs:{id:"cms-g1通用开关设置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cms-g1通用开关设置"}},[a._v("#")]),a._v(" CMS/G1通用开关设置")]),a._v(" "),r("h3",{attrs:{id:"xx-disableexplicitgc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-disableexplicitgc"}},[a._v("#")]),a._v(" -XX:+DisableExplicitGC")]),a._v(" "),r("p",[a._v("设置忽略System.gc()的调用，不建议设置该参数，因为部分依赖Java NIO的框架(例如Netty)在内存异常耗尽时，会主动调用System.gc()，触发Full GC，回收DirectByteBuffer对象，作为回收堆外内存的最后保障机制，设置该参数之后会导致在该情况下堆外内存得不到清理 参考："),r("a",{attrs:{href:"https://www.ezlippi.com/blog/2017/10/why-not-expliclitgc.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("为什么不推荐使用-XX:+DisableExplicitGC"),r("OutboundLink")],1)]),a._v(" "),r("h3",{attrs:{id:"xx-parallelrefprocenabled"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-parallelrefprocenabled"}},[a._v("#")]),a._v(" -XX:+ParallelRefProcEnabled")]),a._v(" "),r("p",[a._v("开启尽可能并行处理Reference对象，建议开启")]),a._v(" "),r("h1",{attrs:{id:"cms-g1通用线程数设置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cms-g1通用线程数设置"}},[a._v("#")]),a._v(" CMS/G1通用线程数设置")]),a._v(" "),r("h3",{attrs:{id:"xx-parallelgcthreads-10"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-parallelgcthreads-10"}},[a._v("#")]),a._v(" -XX:ParallelGCThreads=10")]),a._v(" "),r("p",[a._v("设置并行收集垃圾器在应用线程STW期间时GC处理线程数")]),a._v(" "),r("h3",{attrs:{id:"xx-concgcthreads-10"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-concgcthreads-10"}},[a._v("#")]),a._v(" -XX:ConcGCThreads=10")]),a._v(" "),r("p",[a._v("设置垃圾收集器在与应用线程并发执行标记处理(非STW阶段)时的线程数")]),a._v(" "),r("h1",{attrs:{id:"cms常用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cms常用"}},[a._v("#")]),a._v(" CMS常用")]),a._v(" "),r("h3",{attrs:{id:"xx-useconcmarksweepgc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-useconcmarksweepgc"}},[a._v("#")]),a._v(" -XX:+UseConcMarkSweepGC")]),a._v(" "),r("p",[a._v("设置使用CMS作为老年代垃圾收集器")]),a._v(" "),r("h3",{attrs:{id:"xx-cmsinitiatingoccupancyfraction-70"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-cmsinitiatingoccupancyfraction-70"}},[a._v("#")]),a._v(" -XX:CMSInitiatingOccupancyFraction=70")]),a._v(" "),r("p",[a._v("设置老年代空间使用的比率阈值多少时触发CMS GC，范围1~100，建议70，需要和-XX:+UseCMSInitiatingOccupancyOnly参数搭配使用才生效\n（如果设置过小，有可能FGC后老年代仍大于这个值从0而造成频繁gc）")]),a._v(" "),r("h3",{attrs:{id:"xx-usecmsinitiatingoccupancyonly"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-usecmsinitiatingoccupancyonly"}},[a._v("#")]),a._v(" -XX:+UseCMSInitiatingOccupancyOnly")]),a._v(" "),r("p",[a._v("设置CMS严格按照-XX:CMSInitiatingOccupancyFraction参数设置的阈值来触发CMS GC，如果没有设置，虚拟机会根据收集的数据决定是否触发，建议线上环境带上这个参数，不然会加大问题排查的难度")]),a._v(" "),r("h3",{attrs:{id:"xx-explicitgcinvokesconcurrentandunloadsclasses"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-explicitgcinvokesconcurrentandunloadsclasses"}},[a._v("#")]),a._v(" -XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses")]),a._v(" "),r("p",[a._v("保证显式调用System.gc()触发的是一个并发GC周期而不是Full GC，建议开启")]),a._v(" "),r("h3",{attrs:{id:"xx-cmsclassunloadingenabled"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-cmsclassunloadingenabled"}},[a._v("#")]),a._v(" -XX:+CMSClassUnloadingEnabled")]),a._v(" "),r("p",[a._v("发送CMS GC时触发类卸载，推荐开启")]),a._v(" "),r("h3",{attrs:{id:"xx-cmsscavengebeforeremark"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-cmsscavengebeforeremark"}},[a._v("#")]),a._v(" -XX:+CMSScavengeBeforeRemark")]),a._v(" "),r("p",[a._v("在CMS的重新标记阶段之前执行年轻代Young GC，可减少相当一部分的需要标记的对象，减少CMS重新标记时间的开销，建议开启")]),a._v(" "),r("h3",{attrs:{id:"xx-usecmscompactatfullcollection"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-usecmscompactatfullcollection"}},[a._v("#")]),a._v(" -XX:UseCMSCompactAtFullCollection")]),a._v(" "),r("p",[a._v("是否在CMS发生Full GC之后是否进行空间整理，缺省默认开启(推荐)")]),a._v(" "),r("h3",{attrs:{id:"xx-cmsfullgcsbeforecompaction"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-cmsfullgcsbeforecompaction"}},[a._v("#")]),a._v(" -XX:CMSFullGCsBeforeCompaction")]),a._v(" "),r("p",[a._v("进行多少次Full GC之后进行一次空间整理，缺省默认值为0(推荐)，即每次Full GC过后都进行空间整理，空间整理期间STW")]),a._v(" "),r("h1",{attrs:{id:"g1常用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#g1常用"}},[a._v("#")]),a._v(" G1常用")]),a._v(" "),r("h3",{attrs:{id:"xx-useg1gc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-useg1gc"}},[a._v("#")]),a._v(" -XX:+UseG1GC")]),a._v(" "),r("p",[a._v("使用 G1 垃圾收集器")]),a._v(" "),r("h3",{attrs:{id:"xx-maxgcpausemillis-200"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-maxgcpausemillis-200"}},[a._v("#")]),a._v(" -XX:MaxGCPauseMillis=200")]),a._v(" "),r("p",[a._v("设置期望达到的最大GC停顿时间指标，JVM会尽力实现，但不保证达到")]),a._v(" "),r("h3",{attrs:{id:"xx-initiatingheapoccupancypercent-45"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-initiatingheapoccupancypercent-45"}},[a._v("#")]),a._v(" -XX:InitiatingHeapOccupancyPercent=45")]),a._v(" "),r("p",[a._v("启动并发GC周期时的堆内存占用百分比。G1之类的垃圾收集器基于整个整个堆的使用率触发并发GC周期,而不只是某年轻代或者老年代的内存的使用比.，值为 0 则表示”一直执行GC循环”。 默认值为 45")]),a._v(" "),r("h3",{attrs:{id:"xx-g1reservepercent-10"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-g1reservepercent-10"}},[a._v("#")]),a._v(" -XX:G1ReservePercent=10")]),a._v(" "),r("p",[a._v("预留内存占堆内存比值，默认值是10，代表使用10%的堆内存为预留内存，当Survivor区域没有足够空间容纳新晋升对象时会尝试使用预留内存")]),a._v(" "),r("h3",{attrs:{id:"xx-g1heapregionsize-2m"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xx-g1heapregionsize-2m"}},[a._v("#")]),a._v(" -XX:G1HeapRegionSize=2M")]),a._v(" "),r("p",[a._v("设置的 G1 Region区域的大小，当G1因为频繁分配巨型对象失败导致Full GC，可以尝试增大该参数")]),a._v(" "),r("p",[a._v("1、虚拟机栈中引用的对象\n2、方法区中静态属性、常量引用的对象\n3、本地方法栈中引用的对象\n4、被Synchronized锁持有的对象\n5、记录当前被加载类的SystemDictionary\n6、记录字符串常量引用的StringTable\n7、存在跨代引用的对象\n8、和GC Root处于同一CardTable的对象")])])}),[],!1,null,null,null);t.default=e.exports}}]);