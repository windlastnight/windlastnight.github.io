(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{507:function(a,e,n){"use strict";n.r(e);var t=n(25),s=Object(t.a)({},(function(){var a=this,e=a.$createElement,n=a._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"skywalking-客户端配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#skywalking-客户端配置"}},[a._v("#")]),a._v(" SkyWalking 客户端配置")]),a._v(" "),n("h2",{attrs:{id:"java-agent-服务器探针"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-agent-服务器探针"}},[a._v("#")]),a._v(" Java Agent 服务器探针")]),a._v(" "),n("p",[a._v("参考官网给出的帮助 Setup java agent，我们需要使用官方提供的探针为我们达到监控的目的，按照实际情况我们需要实现三种部署方式")]),a._v(" "),n("p",[a._v("IDEA 部署探针\nJava 启动方式部署探针（我们是 Spring Boot 应用程序，需要使用 java -jar 的方式启动应用）\nDocker 启动方式部署探针（需要做到一次构建到处运行的持续集成效果，本章节暂不提供解决方案，到后面的实战环节再实现）\n探针文件在 apache-skywalking-apm-incubating/agent 目录下")]),a._v(" "),n("h2",{attrs:{id:"idea-部署探针"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#idea-部署探针"}},[a._v("#")]),a._v(" IDEA 部署探针")]),a._v(" "),n("p",[a._v("继续之前的案例项目，创建一个名为 hello-spring-cloud-external-skywalking 的目录，并将 agent 整个目录拷贝进来")]),a._v(" "),n("p",[a._v("修改项目的 VM 运行参数，点击菜单栏中的 Run -> EditConfigurations...，此处我们以 nacos-provider 项目为例，修改参数如下")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("-javaagent:D:\\Workspace\\Others\\hello-spring-cloud-alibaba\\hello-spring-cloud-external-skywalking\\agent\\skywalking-agent.jar\n-Dskywalking.agent.service_name=nacos-provider\n-Dskywalking.collector.backend_service=localhost:11800\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br")])]),n("ul",[n("li",[n("code",[a._v("-javaagent")]),a._v("：用于指定探针路径")]),a._v(" "),n("li",[n("code",[a._v("-Dskywalking.agent.service_name")]),a._v("：用于重写 agent/config/agent.config 配置文件中的服务名")]),a._v(" "),n("li",[n("code",[a._v("-Dskywalking.collector.backend_service")]),a._v("：用于重写 agent/config/agent.config 配置文件中的服务地址")])]),a._v(" "),n("h2",{attrs:{id:"java-启动方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-启动方式"}},[a._v("#")]),a._v(" Java 启动方式")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("java -javaagent:/path/to/skywalking-agent/skywalking-agent.jar -Dskywalking.agent.service_name=nacos-provider -Dskywalking.collector.backend_service=localhost:11800 -jar yourApp.jar\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br")])]),n("h2",{attrs:{id:"skywalking-trace-监控"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#skywalking-trace-监控"}},[a._v("#")]),a._v(" SkyWalking Trace 监控")]),a._v(" "),n("p",[a._v("SkyWalking 通过业务调用监控进行依赖分析，提供给我们了服务之间的服务调用拓扑关系、以及针对每个 Endpoint 的 Trace 记录。")]),a._v(" "),n("p",[a._v("Duration：响应时间 185 毫秒\ncomponent：组件类型为 SpringMVC\nurl：请求地址\nhttp.method：请求类型")]),a._v(" "),n("h2",{attrs:{id:"服务性能指标监控"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#服务性能指标监控"}},[a._v("#")]),a._v(" 服务性能指标监控")]),a._v(" "),n("p",[a._v("Avg SLA： 服务可用性（主要是通过请求成功与失败次数来计算）\nCPM： 每分钟调用次数\nAvg Response Time： 平均响应时间")]),a._v(" "),n("p",[a._v("服务可用性指标 SLA\n每分钟平均响应数\n平均响应时间\n服务进程 PID\n服务所在物理机的 IP、Host、OS\n运行时 CPU 使用率\n运行时堆内存使用率\n运行时非堆内存使用率\nGC 情况")])])}),[],!1,null,null,null);e.default=s.exports}}]);