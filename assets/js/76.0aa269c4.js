(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{481:function(o,e,n){"use strict";n.r(e);var t=n(25),p=Object(t.a)({},(function(){var o=this,e=o.$createElement,n=o._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[n("p",[o._v("Reactor 模式中 核心组成：")]),o._v(" "),n("p",[o._v("Reactor：Reactor 在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理程序来对 IO 事件做出反应。 它就像公司的电话接线员，它接听来自客户的电话并将线路转移到适当的联系人；")]),o._v(" "),n("p",[o._v("Handlers：处理程序执行 I/O 事件要完成的实际事件，类似于客户想要与之交谈的公司中的实际官员。Reactor 通过调度适当的处理程序来响应 I/O 事件，处理程序执行非阻塞操作。")]),o._v(" "),n("p",[o._v("主从 Reactor 多线程")]),o._v(" "),n("p",[o._v("方案优缺点说明：")]),o._v(" "),n("p",[o._v("优点：父线程与子线程的数据交互简单职责明确，父线程只需要接收新连接，子线程完成后续的业务处理。\n优点：父线程与子线程的数据交互简单，Reactor 主线程只需要把新连接传给子线程，子线程无需返回数据。\n缺点：编程复杂度较高\v\n结合实例：这种模型在许多项目中广泛使用，包括 Nginx 主从 Reactor 多进程模型，Memcached 主从多线程，Netty 主从多线程模型的支持")]),o._v(" "),n("p",[o._v("Netty抽象出两组线程池 BossGroup 专门负责接收客户端的连接, WorkerGroup 专门负责网络的读写\nBossGroup 和 WorkerGroup 类型都是 NioEventLoopGroup\nNioEventLoopGroup 相当于一个事件循环组, 这个组中含有多个事件循环 ，每一个事件循环是 NioEventLoop\nNioEventLoop 表示一个不断循环的执行处理任务的线程， 每个NioEventLoop 都有一个selector , 用于监听绑定在其上的socket的网络通讯\nNioEventLoopGroup 可以有多个线程, 即可以含有多个NioEventLoop\n每个Boss NioEventLoop 循环执行的步骤有3步\n轮询accept 事件\n处理accept 事件 , 与client建立连接 , 生成NioScocketChannel , 并将其注册到某个worker NIOEventLoop 上的 selector\n处理任务队列的任务 ， 即 runAllTasks\n7) 每个 Worker NIOEventLoop 循环执行的步骤\n轮询read, write 事件\n处理i/o事件， 即read , write 事件，在对应NioScocketChannel 处理\n处理任务队列的任务 ， 即 runAllTasks\n8) 每个Worker NIOEventLoop  处理业务时，会使用pipeline(管道), pipeline 中包含了 channel , 即通过pipeline 可以获取到对应通道, 管道中维护了很多的 处理器")]),o._v(" "),n("p",[o._v("方案再说明\nNetty 抽象出两组线程池，BossGroup 专门负责接收客户端连接，WorkerGroup 专门负责网络读写操作。\nNioEventLoop 表示一个不断循环执行处理任务的线程，每个 NioEventLoop 都有一个 selector，用于监听绑定在其上的 socket 网络通道。\nNioEventLoop 内部采用串行化设计，从消息的读取->解码->处理->编码->发送，始终由 IO 线程 NioEventLoop 负责")]),o._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[o._v("  NioEventLoopGroup 下包含多个 NioEventLoop\n")])])]),n("p",[o._v(" 每个 NioEventLoop 中包含有一个 Selector，一个 taskQueue\n 每个 NioEventLoop 的 Selector 上可以注册监听多个 NioChannel\n 每个 NioChannel 只会绑定在唯一的 NioEventLoop 上\n 每个 NioChannel 都绑定有一个自己的 ChannelPipeline")])])}),[],!1,null,null,null);e.default=p.exports}}]);